package ru.bmstu.rk9.database;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Created by farid on 4/7/17.
 */
public class TableManager {
    public void createTables() {
        try {
            Database.update("CREATE COLUMN TABLE device(" +
                "id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
                "device_id VARCHAR(255)," +
                "device_name" +
                "PRIMARY KEY (id)" +
                ");");
        } catch (SQLException ex) {
            Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
        }
        try {
            Database.update("CREATE COLUMN TABLE robot(" +
                    "id integer GENERATED BY DEFAULT AS IDENTITY," +
                    "device_id INTEGER," +
                    "PRIMARY KEY (id)" +
                    ");");
        } catch (SQLException ex) {
            Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
        }
        try {
            Database.update("CREATE COLUMN TABLE machine(" +
                    "id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
                    "machine_type VARCHAR(255)," +
                    "device_id INTEGER," +
                    "PRIMARY KEY (id)" +
                    ");");
        } catch (SQLException ex) {
            Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
        }
        try {
            Database.update("CREATE COLUMN TABLE detail(" +
                    "id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
                    "name VARCHAR(255)," +
                    "PRIMARY KEY (id)" +
                    ");");
        } catch (SQLException ex) {
            Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
        }
        try {
            Database.update("CREATE COLUMN TABLE client_order(" +
                    "id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
                    "detail_id INTEGER," +
                    "amount INTEGER," +
                    "PRIMARY KEY (id)" +
                    ");");
        } catch (SQLException ex) {
            Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
        }
        try {
            Database.update("CREATE COLUMN TABLE process(" +
                    "id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
                    "machine_id INTEGER," +
                    "program_name VARCHAR(255)," +
                    "PRIMARY KEY (id)" +
                    ");");
        } catch (SQLException ex) {
            Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
        }
        try {
            Database.update("CREATE COLUMN TABLE process_to_detail(" +
                    "id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
                    "process_id INTEGER," +
                    "detail_id INTEGER," +
                    "process_order INTEGER," +
                    "PRIMARY KEY (id)" +
                    ");");
        } catch (SQLException ex) {
            Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
        }
        try {
            Database.update("CREATE COLUMN TABLE machine_state(" +
                    "id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
                    "state_id INTEGER," +
                    "machine_id INTEGER," +
                    "machine_state INTEGER," +
                    "PRIMARY KEY (id)" +
                    ");");
        } catch (SQLException ex) {
            Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
        }
        try {
            Database.update("CREATE COLUMN TABLE robot_state(" +
                    "id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
                    "state_id INTEGER," +
                    "robot_id INTEGER," +
                    "robot_state INTEGER," +
                    "PRIMARY KEY (id)" +
                    ");");
        } catch (SQLException ex) {
            Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
        }
        try {
            Database.update("CREATE COLUMN TABLE state_log(" +
                    "id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
                    "created TIMESTAMP," +
                    "stacker_state INTEGER," +
                    "PRIMARY KEY (id)" +
                    ");");
        } catch (SQLException ex) {
            Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
        }
        try {
            Database.update("CREATE COLUMN TABLE message_log(" +
                    "id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
                    "created TIMESTAMP," +
                    "device_id INTEGER," +
                    "status INTEGER," +
                    "PRIMARY KEY (id)" +
                    ");");
        } catch (SQLException ex) {
            Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
        }
    }
}
