package ru.bmstu.rk9.database;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Created by farid on 4/7/17.
 */
public class TableManager {

  public void createTables() {
    try {
      Database.update("CREATE COLUMN TABLE device(" +
          "device_id INTEGER," +
          "device_string_id VARCHAR(255)," +
          "device_name" +
          "PRIMARY KEY (id)" +
          ");");
    } catch (SQLException ex) {
      Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
    }
    try {
      Database.update("CREATE COLUMN TABLE robot(" +
          "robot_id integer," +
          "device_id INTEGER," +
          "PRIMARY KEY (id)" +
          ");");
    } catch (SQLException ex) {
      Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
    }
    try {
      Database.update("CREATE COLUMN TABLE machine(" +
          "machine_id INTEGER," +
          "machine_type VARCHAR(255)," +
          "device_id INTEGER," +
          "PRIMARY KEY (id)" +
          ");");
    } catch (SQLException ex) {
      Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
    }
    try {
      Database.update("CREATE COLUMN TABLE detail(" +
          "detail_id INTEGER," +
          "name VARCHAR(255)," +
          "PRIMARY KEY (id)" +
          ");");
    } catch (SQLException ex) {
      Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
    }
    try {
      Database.update("CREATE COLUMN TABLE client_order(" +
          "order_id INTEGER," +
          "detail_id INTEGER," +
          "amount INTEGER," +
          "PRIMARY KEY (id)" +
          ");");
    } catch (SQLException ex) {
      Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
    }
    try {
      Database.update("CREATE COLUMN TABLE process(" +
          "process_id INTEGER," +
          "machine_id INTEGER," +
          "program_name VARCHAR(255)," +
          "duration INT," +
          "PRIMARY KEY (id)" +
          ");");
    } catch (SQLException ex) {
      Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
    }
    try {
      Database.update("CREATE COLUMN TABLE process_to_detail(" +
          "process_to_detail_id INTEGER," +
          "process_id INTEGER," +
          "detail_id INTEGER," +
          "process_order INTEGER," +
          "PRIMARY KEY (id)" +
          ");");
    } catch (SQLException ex) {
      Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
    }
    try {
      Database.update("CREATE COLUMN TABLE machine_state(" +
          "machine_state_id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
          "state_id INTEGER," +
          "machine_id INTEGER," +
          "machine_state INTEGER," +
          "PRIMARY KEY (id)" +
          ");");
    } catch (SQLException ex) {
      Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
    }
    try {
      Database.update("CREATE COLUMN TABLE robot_state(" +
          "robot_state_id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
          "state_id INTEGER," +
          "robot_id INTEGER," +
          "robot_state INTEGER," +
          "PRIMARY KEY (id)" +
          ");");
    } catch (SQLException ex) {
      Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
    }
    try {
      Database.update("CREATE COLUMN TABLE state_log(" +
          "state_id INTEGER," +
          "created TIMESTAMP," +
          "stacker_state INTEGER," +
          "PRIMARY KEY (id)" +
          ");");
    } catch (SQLException ex) {
      Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
    }
    try {
      Database.update("CREATE COLUMN TABLE message_log(" +
          "message_id INTEGER," +
          "created TIMESTAMP," +
          "device_id INTEGER," +
          "status INTEGER," +
          "PRIMARY KEY (id)" +
          ");");
    } catch (SQLException ex) {
      Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
    }
  }
}
