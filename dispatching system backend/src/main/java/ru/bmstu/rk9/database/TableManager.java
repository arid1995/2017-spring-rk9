package ru.bmstu.rk9.database;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

public class TableManager {

  private ArrayList<String> queries = new ArrayList<>();

  public TableManager() {
    //1: Device
    queries.add("CREATE COLUMN TABLE device(" +
        "device_id INTEGER," +
        "device_string_id VARCHAR(255)," +
        "device_name VARCHAR(255)," +
        "PRIMARY KEY (device_id)" +
        ");");
    //2: Robot
    queries.add("CREATE COLUMN TABLE robot(" +
        "robot_id integer," +
        "device_id INTEGER," +
        "PRIMARY KEY (robot_id)" +
        ");");
    //3: Machine
    queries.add("CREATE COLUMN TABLE machine(" +
        "machine_id INTEGER," +
        "machine_type VARCHAR(255)," +
        "device_id INTEGER," +
        "PRIMARY KEY (machine_id)" +
        ");");
    //4: Detail
    queries.add("CREATE COLUMN TABLE detail(" +
        "detail_id INTEGER," +
        "name VARCHAR(255)," +
        "PRIMARY KEY (detail_id)" +
        ");");
    //5: Order
    queries.add("CREATE COLUMN TABLE client_order(" +
        "order_id INTEGER," +
        "detail_id INTEGER," +
        "amount INTEGER," +
        "remained INTEGER, " +
        "PRIMARY KEY (order_id)" +
        ");");
    //6: Process
    queries.add("CREATE COLUMN TABLE process(" +
        "process_id INTEGER," +
        "program_name VARCHAR(255)," +
        "duration INT," +
        "PRIMARY KEY (process_id)" +
        ");");
    //7: Machine to process
    queries.add("CREATE COLUMN TABLE machine_to_process(" +
        "machine_to_process_id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
        "machine_id INT," +
        "process_id INT," +
        "PRIMARY KEY (machine_to_process_id)" +
        ");");
    //8: Process to detail
    queries.add("CREATE COLUMN TABLE process_to_detail(" +
        "process_to_detail_id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
        "process_id INTEGER," +
        "detail_id INTEGER," +
        "process_order INTEGER," +
        "PRIMARY KEY (process_to_detail_id)" +
        ");");
    //9: Machine state
    queries.add("CREATE COLUMN TABLE machine_state(" +
        "machine_state_id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
        "state_id INTEGER," +
        "machine_id INTEGER," +
        "machine_state INTEGER," +
        "PRIMARY KEY (machine_state_id)" +
        ");");
    //10: Robot state
    queries.add("CREATE COLUMN TABLE robot_state(" +
        "robot_state_id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
        "state_id INTEGER," +
        "robot_id INTEGER," +
        "robot_state INTEGER," +
        "PRIMARY KEY (robot_state_id)" +
        ");");
    //11: State log
    queries.add("CREATE COLUMN TABLE state_log(" +
        "state_id INTEGER," +
        "created TIMESTAMP," +
        "stacker_state INTEGER," +
        "PRIMARY KEY (state_id)" +
        ");");
    //12: Message log
    queries.add("CREATE COLUMN TABLE message_log(" +
        "message_id INTEGER," +
        "created TIMESTAMP," +
        "device_id INTEGER," +
        "status INTEGER," +
        "PRIMARY KEY (message_id)" +
        ");");
  }

  public void createTables() {
    for (String query : queries) {
      try {
        Database.update(query);
      } catch (SQLException ex) {
        Logger.getLogger(Logger.class.getName()).log(Level.WARNING, ex.getMessage(), ex);
        Logger.getLogger(Logger.class.getName()).log(Level.WARNING, query);
      }
    }
  }
}
